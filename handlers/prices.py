from telegram import Update
from telegram.ext import ContextTypes
# from storage.json_store import user_data
import storage.json_store as json_store
from menus.main_menu import main_kb
import asyncio
from services.cmc import get_price_float  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –∑ CMC

async def show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    u = json_store.user_data.setdefault(uid, {"coins": {}, "wallets": {}, "nfts": {}})

    if not u["coins"]:
        await q.edit_message_text("–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –º–æ–Ω–µ—Ç.", reply_markup=main_kb())
        return

    prices_text = "üí∞ –ü–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏ –≤–∞—à–∏—Ö –º–æ–Ω–µ—Ç:\n\n"
    tasks = [get_price_float(coin) for coin in u["coins"]]  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ get_price_float –∑ cmc.py
    results = await asyncio.gather(*tasks, return_exceptions=True)

    for coin, price in zip(u["coins"], results):
        if isinstance(price, Exception):
            prices_text += f"{coin}: –ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏\n"
        elif price is not None:
            prices_text += f"{coin}: ${price:.2f}\n"
        else:
            prices_text += f"{coin}: —Ü—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"

    await q.edit_message_text(prices_text, reply_markup=main_kb())
